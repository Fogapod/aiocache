name: CI

on:
  push:
    branches:
      - master
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
    tags: [ 'v*' ]
  pull_request:
    branches:
      - master
      - '[0-9].[0-9]+'

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-lint-${{ hashFiles('requirements-dev.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Pre-Commit hooks
      uses: pre-commit/action@v2
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v3
      with:
        path: requirements-dev.txt
    - name: Install itself
      run: |
        pip install .
    - name: Run linter
      run: |
        make lint
    - name: Prepare twine checker
      run: |
        pip install -U build twine wheel
        python -m build
    - name: Run twine checker
      run: |
        twine check dist/*

  test:
    name: Test
    strategy:
      matrix:
        pyver: ['3.7', '3.8', '3.9']
        os: [ubuntu, macos, windows]
        ujson: ['Y', '']
        redis: ''
        include:
          - pyver: pypy-3.8
            os: ubuntu
          - os: ubuntu
            pyver: '3.9'
            redis: '5.0.14'
    services:
      redis:
        image: redis:${{ matrix.redis }}
        ports:
        - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      memcached:
        image: memcached
        ports:
        - 11211:11211
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.pyver }}-${{ matrix.ujson }}-${{ hashFiles('requirements-dev.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.pyver }}-${{ matrix.ujson }}-
    - name: Install ujson
      if: ${{ matrix.ujson == 'Y' }}
      run: pip install ujson
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v3
      with:
        path: requirements-dev.txt
    - name: Run unittests
      env:
        COLOR: 'yes'
      run: |
        pytest tests
        python -m coverage xml
    - name: Run functional tests
      run: bash examples/run_all.sh
    - name: Upload coverage
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false
